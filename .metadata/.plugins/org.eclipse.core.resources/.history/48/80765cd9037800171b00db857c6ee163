package com.walmart.servcie;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import static java.util.stream.Collectors.toList;

import com.walmart.model.Seat;
import com.walmart.model.SeatHold;
import com.walmart.model.Venue;

public class TicketServiceWalmartImpl implements TicketService {

	private List<SeatHold> pendingReservations;
	private List<Seat> seats;
	
	public TicketServiceWalmartImpl() {
		pendingReservations = new ArrayList<>();
		seats = new LinkedList<>();
		Venue walmart = new Venue();
		initalizeVenue(walmart);
	}


	private void initalizeVenue(Venue venue){
		for(int rows = venue.getNumberOfRows(); rows > 0; rows--){
			for(int rowSeats = 1; rowSeats < venue.getSeatsPerRow() + 1; rowSeats++){
				int score = getScore(rows, rowSeats, venue.getMiddleSeat(),venue.getNumberOfRows());
				seats.add(new Seat(rows,rowSeats,score));
			}
		}
	}
	
	/**
	 * Calculate score for a seat
	 *
	 * @param row the number of row in the venue
	 * @param seat the seat number of a row
	 * @param middleSeatNumber the middle seat number of a row
	 * @param numberOfSeatsPerRow the total number of seats of a row
	 * @return a score for a seat as follow:
	 * row number + seat number for seats from 1 to middle seat and
	 * row number + total number of seats in row - seat number + 1;
	 * the two highest scoring seats for each row are the two middle seats
	 * and each seats away from middle seat will have a score one less per seat 
	 * away from middle.     
	 */
	private int getScore(int row, int seat, int middleSeatNumber, int numberOfSeatsPerRow){
		int score = 0;
		int seatScore = seat >  middleSeatNumber ? numberOfSeatsPerRow - seat + 1: seat;
		score = row + seatScore;
		return score;
	}

	@Override
	public int numSeatsAvailable() {
		return 0;
	}

	@Override
	public SeatHold findAndHoldSeats(int numSeats, String customerEmail) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String reserveSeats(int seatHoldId, String customerEmail) {
		// TODO Auto-generated method stub
		return null;
	}
	
	private void removeAllTimedOut(int secondsToHold){
		List<SeatHold> resvationsToRemove = pendingReservations.stream()
															  .filter(seatHold -> seatHold.getReservedTime() +  secondsToHold > LocalDateTime.now())
															  .collect(toList());
	}
	
	public void printLayout(){
		for(int i = 0; i < 30 * 30; i++){
			if(i % 30 == 0) System.out.println();
			System.out.print(seats.get(i).getScore() + ",");
		}
	}
	
	public static void main(String [] args){
		TicketServiceWalmartImpl v = new TicketServiceWalmartImpl();
		v.printLayout();
	}
}
