package com.walmart.model;

import java.util.LinkedList;
import java.util.List;

/**
 * @author atp1nxa
 *
 */
public class Venue {
	private String name = "WALMART";  
	private int numberOfRows = 30;
	private int seatsPerRow = 30;
	private int holdTime = 300;
	private int requestLimit = 4;
	private final int middleSeat = numberOfRows/2;
	private List<Seat> seats = new LinkedList<>();
	
	public void initalizeVenu(){
		for(int rows = numberOfRows; rows > 0; rows--){
			for(int rowSeats = 1; rowSeats < seatsPerRow + 1; rowSeats++){
				int score = getScore(rows, rowSeats);
				seats.add(new Seat(rows,rowSeats,score));
			}
		}
	}
	
	/**
	 * Calculate score for a seat
	 *
	 * @param row the number of row in the venue
	 * @param seat the seat number of a row
	 * @return a score for a seat as follow:
	 * row number + seat number for seats from 1 to middle seat and
	 * row number + total number of seats in row - seat number + 1;
	 * the two highest scoring seats for each row are the two middle seats
	 * and each seats away from middle seat will have a score one less per seat 
	 * away from middle.     
	 */
	private int getScore(int row, int seat){
		int score = 0;
		int seatScore = seat >  middleSeat ? numberOfRows - seat + 1: seat;
		score = row + seatScore;
		return score;
	}
	
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getNumberOfRows() {
		return numberOfRows;
	}
	public void setNumberOfRows(int numberOfRows) {
		this.numberOfRows = numberOfRows;
	}
	public int getSeatsPerRow() {
		return seatsPerRow;
	}
	public void setSeatsPerRow(int seatsPerRow) {
		this.seatsPerRow = seatsPerRow;
	}
	public int getHoldTime() {
		return holdTime;
	}
	public void setHoldTime(int holdTime) {
		this.holdTime = holdTime;
	}
	public int getRequestLimit() {
		return requestLimit;
	}
	public void setRequestLimit(int requestLimit) {
		this.requestLimit = requestLimit;
	}
	
	public void printLayout(){
		for(int i = 0; i < numberOfRows * numberOfRows; i++){
			if(i % numberOfRows == 0) System.out.println();
			System.out.print(seats.get(i).getScore() + ",");
		}
	}
	
	@Override
	public String toString() {
		return "Venu [name=" + name + ", numberOfRows=" + numberOfRows
				+ ", seatsPerRow=" + seatsPerRow + ", holdTime=" + holdTime
				+ ", requestLimit=" + requestLimit + "]";
	}
	
	public static void main(String [] args){
		Venue v = new Venue();
		v.initalizeVenu();
		v.printLayout();
	}
	
}
