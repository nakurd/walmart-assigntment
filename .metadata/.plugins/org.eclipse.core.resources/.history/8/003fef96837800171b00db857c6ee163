package com.walmart.service

import com.walmart.model.SeatHold
import com.walmart.servcie.TicketServiceWalmartImpl
import spock.lang.Shared
import spock.lang.Specification
import spock.lang.Unroll

class TicketServiceWalmartImplSpec extends Specification{
	 
	private TicketServiceWalmartImpl objectUnderTest;
	
	public void setup(){
		objectUnderTest = new TicketServiceWalmartImpl();
	}
	
	@Unroll
	public void "test that venue is initalized correctly"(){
		expect:
			objectUnderTest != null
			objectUnderTest.pendingReservations.size() == 0
			objectUnderTest.seats.size() == objectUnderTest.walmart.getNumberOfRows() * objectUnderTest.walmart.getSeatsPerRow()
			objectUnderTest.walmart.getMiddleSeat() == objectUnderTest.walmart.getSeatsPerRow()/2
			objectUnderTest.numSeatsAvailable() == objectUnderTest.seats.size()
	}


	//Test score for 10 * 10 venue
	@Unroll("Row Num: #rowNum Seat Num: #seatNum MiddleSeat Num: #middleSeatNum Numer Of Seats Per Row: #numberOfSeatsPerRow Score: #score")
	public void "test getScore method"(){
		expect:
			objectUnderTest.getScore(rowNum,seatNum,middleSeatNum,numberOfSeatsPerRow) == score
		where:
			rowNum << [0,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,
					   5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1]
			seatNum << [0,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,
					   1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]
			middleSeatNum << [0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
							  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]
			numberOfSeatsPerRow << [0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
									,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
									10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
			score << [0,21,22,23,24,25,25,24,23,22,21,19,20,21,22,23,23,22,21,20,19,17,18,19,20,21,21,20,19,18,17,15,16,17,18,19,19,18,17,16,15,
					  13,14,15,16,17,17,16,15,14,13,11,12,13,14,15,15,14,13,12,11,9,10,11,12,13,13,12,11,10,9,7,8,9,10,11,11,10,9,8,7,
					  5,6,7,8,9,9,8,7,6,5,3,4,5,6,7,7,6,5,4,3]
			
	}
	
	public void "test numSeatsAvailable method with no all seats been available"(){
		expect:
			objectUnderTest.numSeatsAvailable() == 100
	}
	
	public void "test numSeatsAvailable method with 10 seats on pending status and no booked"(){
		setup:
			objectUnderTest.findAndHoldSeats(4,"aa1@aa.com")
			objectUnderTest.findAndHoldSeats(4,"aa2@aa.com")
			objectUnderTest.findAndHoldSeats(2,"aa3@aa.com")
		expect:
			objectUnderTest.numSeatsAvailable() == 90
	}
	
	public void "test numSeatsAvailable method with 10 seats on pending status and 10 seats booked"(){
		setup:
			SeatHold s1 = objectUnderTest.findAndHoldSeats(4,"aa1@aa.com")
			SeatHold s2 = objectUnderTest.findAndHoldSeats(4,"aa2@aa.com")
			SeatHold s3 = objectUnderTest.findAndHoldSeats(2,"aa3@aa.com")
			objectUnderTest.reserveSeats(s1.getId(),s1.getBookingEmail())
			objectUnderTest.reserveSeats(s2.getId(),s2.getBookingEmail())
			objectUnderTest.reserveSeats(s3.getId(),s3.getBookingEmail())
		expect:
			objectUnderTest.numSeatsAvailable() == 90
	}
	
}
